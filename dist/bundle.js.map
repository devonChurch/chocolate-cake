{"version":3,"sources":["webpack://chocolateCake/webpack/universalModuleDefinition","webpack://chocolateCake/webpack/bootstrap","webpack://chocolateCake/./src/index.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","singleMap","0","1","2","3","4","5","6","7","8","9","staticMap","__assign","10","11","12","14","multiMap","conditionallyRecurse","staticText","prefixKey","Math","floor","suffixKey","createDoubleAndUnder","recurseValue","incrementMap","reduce","acc","_a","zeros","suffix","_b","Array","fill","join","createIncrementKey","Number","incrementCheck","entries","sort","shell","text","remaining","increment","append","remainingNow","remainingNext","default","replacedText","replace","slice","toUpperCase","sanitiseText","isNotNumber","isNaN","Error","isTooBig","validateInput"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,IACA,mBAAAG,eAAAC,IACAD,OAAA,GAAAH,GACA,iBAAAC,QACAA,QAAA,cAAAD,IAEAD,EAAA,cAAAC,IARA,CASCK,OAAA,WACD,mBCTA,IAAAC,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAP,QAGA,IAAAC,EAAAI,EAAAE,GAAA,CACAC,EAAAD,EACAE,GAAA,EACAT,QAAA,IAUA,OANAU,EAAAH,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAQ,GAAA,EAGAR,EAAAD,QA0DA,OArDAM,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAtB,GACA,oBAAAuB,eAAAC,aACAN,OAAAC,eAAAnB,EAAAuB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAnB,EAAA,cAAiDyB,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAhC,GACA,IAAAe,EAAAf,KAAA2B,WACA,WAA2B,OAAA3B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAK,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,2TC7DA,IAAMC,EAA2B,CAC/BC,EAAG,OACHC,EAAG,MACHC,EAAG,MACHC,EAAG,QACHC,EAAG,OACHC,EAAG,OACHC,EAAG,MACHC,EAAG,QACHC,EAAG,QACHC,EAAG,QAgBCC,EAASC,EAAA,GACVZ,EAd6B,CAGhCa,GAAI,MACJC,GAAI,SACJC,GAAI,SAKJC,GAAI,aAaAC,EAAQL,EAAA,GACTZ,EAAS,CACZG,EAAG,OACHC,EAAG,OACHC,EAAG,MACHC,EAAG,MACHG,EAAG,SAqDCS,EAAuB,SAACjC,GAC5B,OAAAA,EAAQ,IAhDmB,SAACA,GAK5B,IAAMkC,EAAaR,EAAU1B,GAC7B,GAAIkC,EACF,OAAOA,EAST,IAAMC,EAAYC,KAAKC,MAAMrC,EAAQ,IAC/BsC,EAAYtC,EAAQ,GAa1B,OAD6B,IAAdmC,EAEHH,EAASM,GAAU,OAOTN,EAASG,GAAU,MACtBG,EAAY,IAAIZ,EAAUY,GAAe,IAS9CC,CAAqBvC,GAASwC,EAAaxC,IASrDyC,EAAe,CAGnB,CAAC,EAAG,IACJ,CAAC,EAAG,YACJ,CAAC,EAAG,cACJ,CAAC,EAAG,aACJ,CAAC,EAAG,aACJ,CAAC,GAAI,cACL,CAAC,GAAI,iBACL,CAAC,GAAI,kBACLC,OAUA,SAACC,EAAKC,SAACC,EAAAD,EAAA,GAAOE,EAAAF,EAAA,GAAY,OAAAjB,EAAA,GACrBgB,IAAGI,EAAA,IAzBiB,SAACF,GAC1B,UAAI,IAAIG,MAAMH,GAAOI,KAAK,GAAGC,KAAK,IAyB/BC,CAAmBC,OAAOP,KAAU,SAAC7C,GACpC,SAAGiC,EAAqBjC,GAAS8C,GAAQC,KAE7C,IAMIM,EAAiB5D,OAAO6D,QAAQb,GAAcc,KAClD,SAACX,EAAcG,GAAiB,OAA9BH,EAAA,GAAcG,EAAA,GAA2C,GAAK,IA+F5DP,EAAe,SAACxC,GAGpB,IAAMwD,EAAQ,CAAEC,KAAM,GAAIC,UAAW1D,GAWrC,OAVQqD,EAAAX,OAAA,SAAAC,EAAAC,4BA9FU,SAACA,OACnBa,EAAAb,EAAAa,KACAC,EAAAd,EAAAc,UACAC,EAAAf,EAAAe,UACAC,EAAAhB,EAAAgB,OAIA,GAD6B,IAAdF,EAEb,MAAO,CAAED,KAAIA,EAAEC,UAAW,GAM5B,GADqC,KAAdC,EASrB,MAAO,CAAEF,KAASA,EAAI,QAAQG,EAAOF,GAAcA,UAAW,GAWhE,GADmBC,EAAYD,EAE7B,MAAO,CAAED,KAAIA,EAAEC,UAASA,GAS1B,IAAMG,EAAezB,KAAKC,MAAMqB,EAAYC,GACtCG,EAAgBJ,EAAYC,EAKlC,OADgBG,EAAgB,EAQzB,CAAEL,KAASA,EAAI,IAAIG,EAAOC,GAAiBH,UAAWI,GANpD,CAAEL,KAASA,EAAI,IAAIG,EAAOC,GAAiBH,UAAW,sDAiFjEnF,EAAAwF,QARsB,SAAC/D,GAKrB,OAjEmB,SAACyD,GACpB,IAAMO,EAAeP,EAElBQ,QAAQ,QAAS,IAGjBA,QAAQ,eAAgB,IAGxBA,QAAQ,SAAU,QAElBA,QAAQ,aAAc,IAGtBA,QAAQ,cAAe,KAK1B,MAAO,GAHSD,EAAaE,MAAM,EAAG,GAAGC,cACvBH,EAAaE,MAAM,GAgD9BE,CAtBa,SAACpE,GACrB,IAAMqE,EAA+B,iBAAVrE,GAAsBsE,MAAMtE,GAEvD,GAAIqE,EACF,MAAM,IAAIE,MAFW,kCAKvB,IAAMC,EAAWxE,EAAQ,gBAGzB,GAAIwE,EACF,MAAM,IAAID,MAFV,kEAKF,QAASF,GAAeG,GAIRC,CAAczE,IACL,IAAVA,EACkCwC,EAAaxC,GAA5B0B,EAAU","file":"bundle.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"chocolateCake\"] = factory();\n\telse\n\t\troot[\"chocolateCake\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","interface IntReduceValue {\n  // The current accumulated text from parsing the supplied numerical value thus\n  // far.\n  text: string;\n  // The remaining numerical value that has not yet been parsed into text.\n  remaining: number;\n  // The current increment \"key\" (as a number, object keys are originally strings)\n  // that the recursive sequence in reducing on.\n  // Example:\n  // 1000 = thousands\n  // 100 = hundreds\n  increment: number;\n  // The sequence that generate the text representation according to the current\n  // increment in the iteration.\n  append(value: number): string;\n}\n\ninterface IntGenericMap {\n  [key: number]: string;\n}\n\nconst singleMap: IntGenericMap = {\n  0: \"zero\",\n  1: \"one\",\n  2: \"two\",\n  3: \"three\",\n  4: \"four\",\n  5: \"five\",\n  6: \"six\",\n  7: \"seven\",\n  8: \"eight\",\n  9: \"nine\"\n};\n\nconst outlierMap: IntGenericMap = {\n  // ten eleven and twelve share no affiliation to a `${prefix}${suffix}` style\n  // system.\n  10: \"ten\",\n  11: \"eleven\",\n  12: \"twelve\",\n  // In the \"teens\" we need an extra \"u\" in the word \"fourteen\". All other\n  // variants e.g. \"forty\" do not have a \"u\". Because of this we cannot use the\n  // `${prefix}${suffix}` style system that works with something like \"thirteen\"\n  // and \"thirty\".\n  14: \"fourteen\"\n};\n\nconst staticMap: IntGenericMap = {\n  ...singleMap,\n  ...outlierMap\n};\n\n// The prefix for multi digit values (that are not accounted for in the outliers\n// map) that can be automated in their structure.\n// Example:\n// 13 = \"thir\" + \"teen\"\n// 30 = \"thir\" + \"ty\"\nconst multiMap: IntGenericMap = {\n  ...singleMap,\n  2: \"twen\",\n  3: \"thir\",\n  4: \"for\",\n  5: \"fif\",\n  8: \"eigh\"\n};\n\n// For numbers 99 and under we no longer need to recurse through a to generate a\n// text version of the number. From this point we can use our \"look-up maps\" to\n// derive the final text.\nconst createDoubleAndUnder = (value: number): string => {\n  // Static.\n  // -------\n  // If we can simply extract the text from the static map then we can return and\n  // exit early.\n  const staticText = staticMap[value];\n  if (staticText) {\n    return staticText;\n  }\n\n  // Keys.\n  // -----\n  // Get the prefix and suffix for the current number.\n  // Example:\n  // 19 = [prefix = 1], [suffix = 9]\n  // 27 = [prefix = 2], [suffix = 7]\n  const prefixKey = Math.floor(value / 10);\n  const suffixKey = value % 10;\n\n  // Teen.\n  // -----\n  // \"Teen\" numbers are slightly difference in that their prefix and suffix are\n  // swapped.\n  // Example:\n  // If a number was 29 then we would prefix it with \"twen\" followed by a \"ty\" to\n  // make \"twenty\".\n  // However:\n  // If a number is 19 then we would prefix with the suffix \"nine\" followed by a\n  // \"teen\" to make \"nineteen\".\n  const isTeen = prefixKey === 1;\n  if (isTeen) {\n    return `${multiMap[suffixKey]}teen`;\n  }\n\n  // Standard.\n  // ---------\n  // Finally if there are no matches thus far we can create a \"standard\" text\n  // version for numbers 20 through to 99.\n  const prefixText = `${multiMap[prefixKey]}ty`;\n  const suffixText = suffixKey ? ` ${staticMap[suffixKey]}` : \"\";\n\n  return `${prefixText}${suffixText}`;\n};\n\n// If a number is 99 or less we can immediately find out its text representation.\n// If not we continue to recurse through to distill the remaining number closeer\n// and closer to be less than 99.\nconst conditionallyRecurse = (value: number): string =>\n  value < 100 ? createDoubleAndUnder(value) : recurseValue(value);\n\n// Take a value of \"zeros\" and creates an increment key.\n// Example\"\n// 2 zeros = [100]\n// 6 zeros = [1000000]\nconst createIncrementKey = (zeros: number): string =>\n  `1${new Array(zeros).fill(0).join(\"\")}`;\n\nconst incrementMap = [\n  // The number of \"zeros\" in each increment (KEY) and their corresponding text\n  // represented suffix (VALUE).\n  [1, \"\"],\n  [2, \" hundred\"],\n  [3, \" thousand,\"],\n  [6, \" million,\"],\n  [9, \" billion,\"],\n  [12, \" trillion,\"],\n  [15, \" quadrillion,\"],\n  [18, \" quintillion,\"]\n].reduce(\n  // Turn this configuration into a map of key/value pairs to build a recursive\n  // increment system.\n  // Example:\n  // {\n  //   ...\n  //   [100]: value => (/* create (hundred)... */),\n  //   [1000]: value => (/* create (thousand)... */),\n  //   ...\n  // }\n  (acc, [zeros, suffix]) => ({\n    ...acc,\n    [createIncrementKey(Number(zeros))]: (value: number): string =>\n      `${conditionallyRecurse(value)}${suffix}`\n  }),\n  {}\n);\n\n// Order the incrementMap into an array from largest to smallest increment so\n// that we can recursively iterate through and build up a text representation\n// for each major increment milestone (millions, thousands, hundreds).\nconst incrementCheck = Object.entries(incrementMap).sort(\n  ([incrementA], [incrementB]) => (incrementA < incrementB ? 1 : -1)\n);\n\n// Distill the remaining numerical value closer to 0 while building up the text\n// representation to emulate the value extracted thus far.\nconst reduceValue = ({\n  text,\n  remaining,\n  increment,\n  append\n}: IntReduceValue) => {\n  // Stop recursing if we have finally reached zero for the remaining number.\n  const isZero = remaining === 0;\n  if (isZero) {\n    return { text, remaining: 0 };\n  }\n\n  // If the remaining number is less than 99 (on the 10 increment) then we can\n  // derive the last text representation without recursing further.\n  const isFinalRecurse = increment === 10;\n  if (isFinalRecurse) {\n    // Note: we add \"and\" to the text as its the final value in the current sequence.\n    // Example:\n    // one thousand and one\n    //              ---\n    // Or:\n    // five and seven thousand, four hundred and two\n    //     ---                              ---\n    return { text: `${text} and ${append(remaining)}`, remaining: 0 };\n  }\n\n  // If the remaining number is too small for the current increment then skip the\n  // current increment and move on. This can happen if there are no relevant value\n  // for the current increment.\n  // Example:\n  // 1,001 = \"one thousand and one\"\n  // We completely skip the \"hundreds\" increment as its not relevant for this\n  // number.\n  const isTooSmall = increment > remaining;\n  if (isTooSmall) {\n    return { text, remaining };\n  }\n\n  // If there are no matches thus far then we get the current values associated\n  // to the increment and extract the remaining values for then next recursive\n  // iteration.\n  // Example:\n  // 1234 = [1000 for the \"thousands\" increment] and [234 remaining for the next\n  // iteration].\n  const remainingNow = Math.floor(remaining / increment);\n  const remainingNext = remaining % increment;\n\n  // If there are no remaining values then we ensure that the recursion stops in\n  // the next \"isZero\" check.\n  const hasNext = remainingNext > 0;\n  if (!hasNext) {\n    return { text: `${text} ${append(remainingNow)}`, remaining: 0 };\n  }\n\n  // Generate the current text representation for this increment and return the\n  // remaining values so that we can continue the recursion sequence in the next\n  // iteration.\n  return { text: `${text} ${append(remainingNow)}`, remaining: remainingNext };\n};\n\n// As we recursively grow the text representation of the supplied value we can\n// run into anomalies due to an isolation from what next/previous increments in\n// the recursion sequence are doing. In that regard this is a final check to ensure\n// that the structure of the numerical text is consistent with the required format.\nconst sanitiseText = (text: string): string => {\n  const replacedText = text\n    // Should start flush with text (no white space).\n    .replace(/^\\s*/g, \"\")\n    // Should not start with \"and \" (can happen when the number is one or two\n    // digits in size).\n    .replace(/^(and)(\\s*)/g, \"\")\n    // \" and\" should not be preceded by a comma (as it's the last reference in\n    // the string \"section\").\n    .replace(/, and/g, \" and\")\n    // Should end flush with text (no white space or trailing commas).\n    .replace(/(,*|\\s*)$/g, \"\")\n    // White space inside the text representation should only be once space in\n    // size.\n    .replace(/\\s\\s(\\s*)?/g, \" \");\n  // Capitalise the first letter in the string sequence.\n  const capital = replacedText.slice(0, 1).toUpperCase();\n  const remaining = replacedText.slice(1);\n\n  return `${capital}${remaining}`;\n};\n\n// Iterate through each increment size (from largest to smallest) and build up a\n// text representation of the supplied value.\n// As we recurse through the increments the text representation grows and the\n// remaining number shrinks until it reaches 0.\nconst recurseValue = (value: number): string => {\n  // Start with an empty string and a \"remaining\" numerical value of the full\n  // supplied number.\n  const shell = { text: \"\", remaining: value };\n  const { text } = incrementCheck.reduce(\n    (acc, [increment, append]) =>\n      reduceValue({\n        ...acc,\n        append,\n        increment: Number(increment)\n      } as IntReduceValue),\n    shell\n  );\n\n  return text;\n};\n\nconst validateInput = (value: number): boolean => {\n  const isNotNumber = typeof value !== \"number\" || isNaN(value);\n  const notNumberError = \"supplied value is not a number\";\n  if (isNotNumber) {\n    throw new Error(notNumberError);\n  }\n\n  const isTooBig = value > 999999999999999;\n  const tooBigError =\n    \"supplied value is too large for javascript to parse accurately\";\n  if (isTooBig) {\n    throw new Error(tooBigError);\n  }\n\n  return !(isNotNumber || isTooBig);\n};\n\nconst chocolateCake = (value: number): string => {\n  const isValid = validateInput(value);\n  const isZero = value === 0;\n  const text = !isValid || isZero ? staticMap[0] : recurseValue(value);\n\n  return sanitiseText(text);\n};\n\nexport default chocolateCake;\n"],"sourceRoot":""}